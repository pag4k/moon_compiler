
class Utility : InheritedUtility {
  integer var1[4][5][7][8][9][1][1];
  integer findMax(integer aray[100]);
  integer findMin(integer array[100]);
  };

class InheritedUtility: III {
  InheritedUtility cl;
  integer member1;
  III a;
};

class III {
  integer tt;
  InheritedUtility cl;
};


integer Utility::findMax(integer array[100]){
  integer maxValue;
  maxValue = array[99];
  for( integer idx = 99; idx > 0; idx = idx  - 1 ){
    if(array[idx] > maxValue) then {
      maxValue = array[idx];}
    else{};
  };
  return (maxValue);};

integer Utility::findMin(integer array[100]){
  integer minValue;
  minValue = array[99];
    for( integer idx = 1; idx <= 99; idx = ( idx ) + 1) {
      if(8) then {
        minValue = array[idx];}
      else{};
  };
  return (1);};

integer randomize(){
  integer value;
  Utility utility;
  value = 100 * (2 + 3);
  return (9);};

main {
  integer sample[100];
  integer idx;
  integer maxValue;
  integer minValue;
  Utility utility;
  Utility arrayUtility[2][3][6][7];
  for(integer t = 0; t<=100 ; t = t + 1) {
    read(sample[t]);
    sample[t] = (sample[t] * randomize());
  };
  maxValue = utility.findMax(sample);
  minValue = utility.findMin(sample);
  utility.var1[4][1][0][0][0][0][0] = 10;
  write(maxValue);
  write(minValue);};

