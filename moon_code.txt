          % processing: t0 := 10
          addi r2,r0,10
          sw 0(r14),r2
          % processing: function definition: get (func2)
func2     nop
          sw -8(r14),r15
          % processing: t0 := 6
          addi r2,r0,6
          sw -20(r14),r2
          % processing: b :=  t0
          lw r2,-20(r14)
          % processing: Loading instance address to r12
          lw r6,-12(r14)
          add r12,r0,r6
          sw -4(r12),r2
          % processing: t1 = array offset
          subi r2,r0,4
          lw r3,-16(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -24(r14),r2
          % processing: return value = a
          % processing: Loading instance address to r12
          lw r4,-12(r14)
          add r12,r0,r4
          % processing: Array -> Switching to offset register.
          addi r3,r12,-44
          addi r3,r3,40
          lw r4,-24(r14)
          add r3,r3,r4
          lw r2,0(r3)
          sw -4(r14),r2
          j endfunc2
endfunc2  nop
          lw r15,-8(r14)
          jr r15

mainfunc  entry
          addi r14,r0,topaddr
          % processing: t0 := 0
          addi r2,r0,0
          sw -48(r14),r2
          % processing: for_cond(i), index: 0
          % processing: i := t0
          lw r2,-48(r14)
          sw -84(r14),r2
condfor0  nop
          % processing: t1 := 10
          addi r2,r0,10
          sw -52(r14),r2
          % processing: t2 := i < t1
          lw r2,-84(r14)
          lw r3,-52(r14)
          clt r4,r2,r3
          sw -56(r14),r4
          % processing: for_incr(i), index: 0
          lw r2,-56(r14)
          bz r2,endfor0
          j loopfor0
incrfor0  nop
          % processing: t3 := 1
          addi r2,r0,1
          sw -60(r14),r2
          % processing: t4 := i + t3
          lw r2,-84(r14)
          lw r3,-60(r14)
          add r4,r2,r3
          sw -64(r14),r4
          % processing: i :=  t4
          lw r2,-64(r14)
          sw -84(r14),r2
          j condfor0
loopfor0  nop
          % processing: t5 = array offset
          subi r2,r0,4
          lw r3,-84(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -68(r14),r2
          % processing: t6 := 100
          addi r2,r0,100
          sw -72(r14),r2
          % processing: t7 := t6 + i
          lw r2,-72(r14)
          lw r3,-84(r14)
          add r4,r2,r3
          sw -76(r14),r4
          % processing: a :=  t7
          lw r2,-76(r14)
          % processing: Array -> Switching to offset register.
          addi r5,r14,-44
          addi r5,r5,40
          lw r6,-68(r14)
          add r5,r5,r6
          sw 0(r5),r2
          % processing: Function call to get (func2)
          % processing: Setting instance address
          addi r2,r14,0
          sw -96(r14),r2
          % processing: n = i
          lw r2,-84(r14)
          sw -100(r14),r2
          % processing: Move stack frame pointer by: -84
          addi r14,r14,-84
          % processing: jump to: func2
          jl r15,func2
          % processing: Move back stack frame pointer by: -84
          subi r14,r14,-84
          % processing: t8 = return value
          lw r2,-88(r14)
          sw -80(r14),r2
          % processing: write(get)
          lw r2,-80(r14)
          % processing: Put value on stack
          addi r14,r14,-84
          sw -8(r14),r2
          % processing: Put buffer address on the stack
          addi r2,r0,buf
          sw -12(r14),r2
          % processing: Convert int to string for output
          jl r15,intstr
          sw -8(r14),r13
          % processing: Output to console
          jl r15,putstr
          subi r14,r14,-84
          j incrfor0
endfor0   nop
endmain   hlt
          % processing: buffer space used for console output
buf       res 20
