          % processing: t0 := 5
          addi r2,r0,5
          sw 0(r14),r2
          % processing: t0 := 5
          addi r2,r0,5
          sw 0(r14),r2
          % processing: t0 := 5
          addi r2,r0,5
          sw 0(r14),r2
          % processing: t0 := 3
          addi r2,r0,3
          sw 0(r14),r2
          % processing: function definition: getid (func4)
func4     nop
          sw -8(r14),r15
          % processing: return value = id
          % processing: Loading instance address to r12
          lw r3,-12(r14)
          add r12,r0,r3
          lw r2,-4(r12)
          sw -4(r14),r2
          j endfunc4
endfunc4  nop
          lw r15,-8(r14)
          jr r15

          % processing: function definition: getAtPos (func5)
func5     nop
          sw -16(r14),r15
          % processing: t0 := 0
          addi r2,r0,0
          sw -48(r14),r2
          % processing: t1 = array offset
          subi r2,r0,4
          lw r3,-48(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -52(r14),r2
          % processing: t2 := 1
          addi r2,r0,1
          sw -56(r14),r2
          % processing: t3 = array offset
          subi r2,r0,4
          lw r3,-56(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -60(r14),r2
          % processing: t4 := 2
          addi r2,r0,2
          sw -64(r14),r2
          % processing: t5 = array offset
          subi r2,r0,4
          lw r3,-64(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -68(r14),r2
          % processing: t6 = array offset
          subi r2,r0,12
          % processing: Array -> Switching to offset register.
          addi r5,r14,-44
          addi r5,r5,12
          lw r6,-52(r14)
          add r5,r5,r6
          lw r3,0(r5)
          muli r4,r3,300
          sub r2,r2,r4
          % processing: Array -> Switching to offset register.
          addi r5,r14,-44
          addi r5,r5,12
          lw r6,-60(r14)
          add r5,r5,r6
          lw r3,0(r5)
          muli r4,r3,60
          sub r2,r2,r4
          % processing: Array -> Switching to offset register.
          addi r5,r14,-44
          addi r5,r5,12
          lw r6,-68(r14)
          add r5,r5,r6
          lw r3,0(r5)
          muli r4,r3,12
          sub r2,r2,r4
          sw -72(r14),r2
          % processing: return value = pixels
          % processing: Loading instance address to r12
          lw r3,-28(r14)
          add r12,r0,r3
          % processing: Array -> Switching to offset register.
          addi r2,r12,-1508
          addi r2,r2,1500
          lw r3,-72(r14)
          add r2,r2,r3
          lw r3,0(r2)
          sw -12(r14),r3
          lw r3,4(r2)
          sw -8(r14),r3
          lw r3,8(r2)
          sw -4(r14),r3
          j endfunc5
endfunc5  nop
          lw r15,-16(r14)
          jr r15

          % processing: function definition: setAtPos (func6)
func6     nop
          sw -8(r14),r15
          % processing: t0 := 0
          addi r2,r0,0
          sw -44(r14),r2
          % processing: t1 = array offset
          subi r2,r0,4
          lw r3,-44(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -48(r14),r2
          % processing: t2 := 1
          addi r2,r0,1
          sw -52(r14),r2
          % processing: t3 = array offset
          subi r2,r0,4
          lw r3,-52(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -56(r14),r2
          % processing: t4 := 2
          addi r2,r0,2
          sw -60(r14),r2
          % processing: t5 = array offset
          subi r2,r0,4
          lw r3,-60(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -64(r14),r2
          % processing: t6 = array offset
          subi r2,r0,12
          % processing: Array -> Switching to offset register.
          addi r5,r14,-28
          addi r5,r5,12
          lw r6,-48(r14)
          add r5,r5,r6
          lw r3,0(r5)
          muli r4,r3,300
          sub r2,r2,r4
          % processing: Array -> Switching to offset register.
          addi r5,r14,-28
          addi r5,r5,12
          lw r6,-56(r14)
          add r5,r5,r6
          lw r3,0(r5)
          muli r4,r3,60
          sub r2,r2,r4
          % processing: Array -> Switching to offset register.
          addi r5,r14,-28
          addi r5,r5,12
          lw r6,-64(r14)
          add r5,r5,r6
          lw r3,0(r5)
          muli r4,r3,12
          sub r2,r2,r4
          sw -68(r14),r2
          % processing: pixels := rgb
          % processing: Loading instance address to r12
          lw r3,-12(r14)
          add r12,r0,r3
          % processing: Array -> Switching to offset register.
          addi r2,r12,-1508
          addi r2,r2,1500
          lw r3,-68(r14)
          add r2,r2,r3
          lw r3,-40(r14)
          sw 0(r2),r3
          lw r3,-36(r14)
          sw 4(r2),r3
          lw r3,-32(r14)
          sw 8(r2),r3
          % processing: t7 := 0
          addi r2,r0,0
          sw -72(r14),r2
          % processing: return value = t7
          lw r2,-72(r14)
          sw -4(r14),r2
          j endfunc6
endfunc6  nop
          lw r15,-8(r14)
          jr r15

          % processing: function definition: findBluest (func7)
func7     nop
          sw -20(r14),r15
          % processing: t0 := 0
          addi r2,r0,0
          sw -60(r14),r2
          % processing: maxb := t0
          lw r2,-60(r14)
          sw -56(r14),r2
          % processing: t1 := 0
          addi r2,r0,0
          sw -64(r14),r2
          % processing: for_cond(i), index: 2
          % processing: i := t1
          lw r2,-64(r14)
          sw -160(r14),r2
condfor2  nop
          % processing: t2 := 5
          addi r2,r0,5
          sw -68(r14),r2
          % processing: t3 := i < t2
          lw r2,-160(r14)
          lw r3,-68(r14)
          clt r4,r2,r3
          sw -72(r14),r4
          % processing: for_incr(i), index: 2
          lw r2,-72(r14)
          bz r2,endfor2
          j loopfor2
incrfor2  nop
          % processing: t4 := 1
          addi r2,r0,1
          sw -76(r14),r2
          % processing: t5 := i + t4
          lw r2,-160(r14)
          lw r3,-76(r14)
          add r4,r2,r3
          sw -80(r14),r4
          % processing: i := t5
          lw r2,-80(r14)
          sw -160(r14),r2
          j condfor2
loopfor2  nop
          % processing: t6 := 0
          addi r2,r0,0
          sw -84(r14),r2
          % processing: for_cond(j), index: 1
          % processing: j := t6
          lw r2,-84(r14)
          sw -156(r14),r2
condfor1  nop
          % processing: t7 := 5
          addi r2,r0,5
          sw -88(r14),r2
          % processing: t8 := j < t7
          lw r2,-156(r14)
          lw r3,-88(r14)
          clt r4,r2,r3
          sw -92(r14),r4
          % processing: for_incr(j), index: 1
          lw r2,-92(r14)
          bz r2,endfor1
          j loopfor1
incrfor1  nop
          % processing: t9 := 1
          addi r2,r0,1
          sw -96(r14),r2
          % processing: t10 := j + t9
          lw r2,-156(r14)
          lw r3,-96(r14)
          add r4,r2,r3
          sw -100(r14),r4
          % processing: j := t10
          lw r2,-100(r14)
          sw -156(r14),r2
          j condfor1
loopfor1  nop
          % processing: t11 := 0
          addi r2,r0,0
          sw -104(r14),r2
          % processing: for_cond(k), index: 0
          % processing: k := t11
          lw r2,-104(r14)
          sw -152(r14),r2
condfor0  nop
          % processing: t12 := 5
          addi r2,r0,5
          sw -108(r14),r2
          % processing: t13 := k < t12
          lw r2,-152(r14)
          lw r3,-108(r14)
          clt r4,r2,r3
          sw -112(r14),r4
          % processing: for_incr(k), index: 0
          lw r2,-112(r14)
          bz r2,endfor0
          j loopfor0
incrfor0  nop
          % processing: t14 := 1
          addi r2,r0,1
          sw -116(r14),r2
          % processing: t15 := k + t14
          lw r2,-152(r14)
          lw r3,-116(r14)
          add r4,r2,r3
          sw -120(r14),r4
          % processing: k := t15
          lw r2,-120(r14)
          sw -152(r14),r2
          j condfor0
loopfor0  nop
          % processing: t16 = array offset
          subi r2,r0,12
          lw r3,-160(r14)
          muli r4,r3,300
          sub r2,r2,r4
          lw r3,-156(r14)
          muli r4,r3,60
          sub r2,r2,r4
          lw r3,-152(r14)
          muli r4,r3,12
          sub r2,r2,r4
          sw -124(r14),r2
          % processing: t17 := b > maxb
          % processing: Loading instance address to r12
          lw r6,-36(r14)
          add r12,r0,r6
          % processing: Array -> Switching to offset register.
          addi r5,r12,-1508
          addi r5,r5,1500
          lw r6,-124(r14)
          add r5,r5,r6
          addi r5,r5,12
          addi r5,r5,-12
          lw r2,0(r5)
          lw r3,-56(r14)
          cgt r4,r2,r3
          sw -128(r14),r4
          % processing: if(t17), index: 0
          lw r2,-128(r14)
          bz r2,elseif0
          % processing: t18 = array offset
          subi r2,r0,12
          lw r3,-160(r14)
          muli r4,r3,300
          sub r2,r2,r4
          lw r3,-156(r14)
          muli r4,r3,60
          sub r2,r2,r4
          lw r3,-152(r14)
          muli r4,r3,12
          sub r2,r2,r4
          sw -132(r14),r2
          % processing: maxb := b
          % processing: Loading instance address to r12
          lw r3,-36(r14)
          add r12,r0,r3
          % processing: Array -> Switching to offset register.
          addi r2,r12,-1508
          addi r2,r2,1500
          lw r3,-132(r14)
          add r2,r2,r3
          addi r2,r2,12
          addi r2,r2,-12
          lw r3,0(r2)
          sw -56(r14),r3
          % processing: Function call to fromCoord (func8)
          % processing: z = k
          lw r3,-152(r14)
          sw -184(r14),r3
          % processing: y = j
          lw r3,-156(r14)
          sw -188(r14),r3
          % processing: x = i
          lw r3,-160(r14)
          sw -192(r14),r3
          % processing: Move stack frame pointer by: -160
          addi r14,r14,-160
          % processing: jump to: func8
          jl r15,func8
          % processing: Move back stack frame pointer by: -160
          subi r14,r14,-160
          % processing: t19 = return value
          lw r3,-176(r14)
          sw -148(r14),r3
          lw r3,-172(r14)
          sw -144(r14),r3
          lw r3,-168(r14)
          sw -140(r14),r3
          lw r3,-164(r14)
          sw -136(r14),r3
          % processing: max := fromCoord
          lw r2,-148(r14)
          sw -52(r14),r2
          lw r2,-144(r14)
          sw -48(r14),r2
          lw r2,-140(r14)
          sw -44(r14),r2
          lw r2,-136(r14)
          sw -40(r14),r2
          j endif0
elseif0   nop
endif0    nop
          j incrfor0
endfor0   nop
          j incrfor1
endfor1   nop
          j incrfor2
endfor2   nop
          % processing: return value = max
          lw r2,-52(r14)
          sw -16(r14),r2
          lw r2,-48(r14)
          sw -12(r14),r2
          lw r2,-44(r14)
          sw -8(r14),r2
          lw r2,-40(r14)
          sw -4(r14),r2
          j endfunc7
endfunc7  nop
          lw r15,-20(r14)
          jr r15

          % processing: function definition: fromCoord (func8)
func8     nop
          sw -20(r14),r15
          % processing: t0 := 0
          addi r2,r0,0
          sw -52(r14),r2
          % processing: t1 = array offset
          subi r2,r0,4
          lw r3,-52(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -56(r14),r2
          % processing: coord := x
          % processing: Array -> Switching to offset register.
          addi r2,r14,-48
          addi r2,r2,12
          lw r3,-56(r14)
          add r2,r2,r3
          lw r3,-32(r14)
          sw 0(r2),r3
          % processing: t2 := 1
          addi r2,r0,1
          sw -60(r14),r2
          % processing: t3 = array offset
          subi r2,r0,4
          lw r3,-60(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -64(r14),r2
          % processing: coord := y
          % processing: Array -> Switching to offset register.
          addi r2,r14,-48
          addi r2,r2,12
          lw r3,-64(r14)
          add r2,r2,r3
          lw r3,-28(r14)
          sw 0(r2),r3
          % processing: t4 := 2
          addi r2,r0,2
          sw -68(r14),r2
          % processing: t5 = array offset
          subi r2,r0,4
          lw r3,-68(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -72(r14),r2
          % processing: coord := z
          % processing: Array -> Switching to offset register.
          addi r2,r14,-48
          addi r2,r2,12
          lw r3,-72(r14)
          add r2,r2,r3
          lw r3,-24(r14)
          sw 0(r2),r3
          % processing: return value = new
          lw r2,-48(r14)
          sw -16(r14),r2
          lw r2,-44(r14)
          sw -12(r14),r2
          lw r2,-40(r14)
          sw -8(r14),r2
          lw r2,-36(r14)
          sw -4(r14),r2
          j endfunc8
endfunc8  nop
          lw r15,-20(r14)
          jr r15

          % processing: function definition: fromArray (func9)
func9     nop
          sw -20(r14),r15
          % processing: t0 := 3
          addi r2,r0,3
          sw 0(r14),r2
          % processing: coord := newCoord
          lw r2,-32(r14)
          sw -48(r14),r2
          lw r2,-28(r14)
          sw -44(r14),r2
          lw r2,-24(r14)
          sw -40(r14),r2
          % processing: return value = new
          lw r2,-48(r14)
          sw -16(r14),r2
          lw r2,-44(r14)
          sw -12(r14),r2
          lw r2,-40(r14)
          sw -8(r14),r2
          lw r2,-36(r14)
          sw -4(r14),r2
          j endfunc9
endfunc9  nop
          lw r15,-20(r14)
          jr r15

          % processing: function definition: add (func10)
func10    nop
          sw -20(r14),r15
          % processing: t0 := 0
          addi r2,r0,0
          sw -56(r14),r2
          % processing: for_cond(i), index: 3
          % processing: i := t0
          lw r2,-56(r14)
          sw -92(r14),r2
condfor3  nop
          % processing: t1 := 3
          addi r2,r0,3
          sw -60(r14),r2
          % processing: t2 := i < t1
          lw r2,-92(r14)
          lw r3,-60(r14)
          clt r4,r2,r3
          sw -64(r14),r4
          % processing: for_incr(i), index: 3
          lw r2,-64(r14)
          bz r2,endfor3
          j loopfor3
incrfor3  nop
          % processing: t3 := 1
          addi r2,r0,1
          sw -68(r14),r2
          % processing: t4 := i + t3
          lw r2,-92(r14)
          lw r3,-68(r14)
          add r4,r2,r3
          sw -72(r14),r4
          % processing: i := t4
          lw r2,-72(r14)
          sw -92(r14),r2
          j condfor3
loopfor3  nop
          % processing: t5 = array offset
          subi r2,r0,4
          lw r3,-92(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -76(r14),r2
          % processing: t6 = array offset
          subi r2,r0,4
          lw r3,-92(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -80(r14),r2
          % processing: t7 = array offset
          subi r2,r0,4
          lw r3,-92(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -84(r14),r2
          % processing: t8 := coord + coord
          % processing: Array -> Switching to offset register.
          addi r5,r14,-52
          addi r5,r5,12
          lw r6,-80(r14)
          add r5,r5,r6
          lw r2,0(r5)
          % processing: Array -> Switching to offset register.
          addi r5,r14,-36
          addi r5,r5,12
          lw r6,-84(r14)
          add r5,r5,r6
          lw r3,0(r5)
          add r4,r2,r3
          sw -88(r14),r4
          % processing: coord := t8
          % processing: Array -> Switching to offset register.
          addi r2,r14,-52
          addi r2,r2,12
          lw r3,-76(r14)
          add r2,r2,r3
          lw r3,-88(r14)
          sw 0(r2),r3
          j incrfor3
endfor3   nop
          % processing: return value = a1
          lw r2,-52(r14)
          sw -16(r14),r2
          lw r2,-48(r14)
          sw -12(r14),r2
          lw r2,-44(r14)
          sw -8(r14),r2
          lw r2,-40(r14)
          sw -4(r14),r2
          j endfunc10
endfunc10 nop
          lw r15,-20(r14)
          jr r15

          % processing: function definition: newrgb (func11)
func11    nop
          sw -16(r14),r15
          % processing: r := r
          lw r2,-28(r14)
          sw -32(r14),r2
          % processing: g := g
          lw r2,-24(r14)
          sw -36(r14),r2
          % processing: b := b
          lw r2,-20(r14)
          sw -40(r14),r2
          % processing: return value = new
          lw r2,-40(r14)
          sw -12(r14),r2
          lw r2,-36(r14)
          sw -8(r14),r2
          lw r2,-32(r14)
          sw -4(r14),r2
          j endfunc11
endfunc11 nop
          lw r15,-16(r14)
          jr r15

          % processing: function definition: average (func12)
func12    nop
          sw -20(r14),r15
          % processing: t0 := 5
          addi r2,r0,5
          sw 0(r14),r2
          % processing: t0 := 0
          addi r2,r0,0
          sw -120(r14),r2
          % processing: for_cond(i), index: 5
          % processing: i := t0
          lw r2,-120(r14)
          sw -184(r14),r2
condfor5  nop
          % processing: t1 := 5
          addi r2,r0,5
          sw -124(r14),r2
          % processing: t2 := i < t1
          lw r2,-184(r14)
          lw r3,-124(r14)
          clt r4,r2,r3
          sw -128(r14),r4
          % processing: for_incr(i), index: 5
          lw r2,-128(r14)
          bz r2,endfor5
          j loopfor5
incrfor5  nop
          % processing: t3 := 1
          addi r2,r0,1
          sw -132(r14),r2
          % processing: t4 := i + t3
          lw r2,-184(r14)
          lw r3,-132(r14)
          add r4,r2,r3
          sw -136(r14),r4
          % processing: i := t4
          lw r2,-136(r14)
          sw -184(r14),r2
          j condfor5
loopfor5  nop
          % processing: t5 := 0
          addi r2,r0,0
          sw -140(r14),r2
          % processing: for_cond(j), index: 4
          % processing: j := t5
          lw r2,-140(r14)
          sw -180(r14),r2
condfor4  nop
          % processing: t6 := 3
          addi r2,r0,3
          sw -144(r14),r2
          % processing: t7 := j < t6
          lw r2,-180(r14)
          lw r3,-144(r14)
          clt r4,r2,r3
          sw -148(r14),r4
          % processing: for_incr(j), index: 4
          lw r2,-148(r14)
          bz r2,endfor4
          j loopfor4
incrfor4  nop
          % processing: t8 := 1
          addi r2,r0,1
          sw -152(r14),r2
          % processing: t9 := j + t8
          lw r2,-180(r14)
          lw r3,-152(r14)
          add r4,r2,r3
          sw -156(r14),r4
          % processing: j := t9
          lw r2,-156(r14)
          sw -180(r14),r2
          j condfor4
loopfor4  nop
          % processing: t10 = array offset
          subi r2,r0,4
          lw r3,-180(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -160(r14),r2
          % processing: t11 = array offset
          subi r2,r0,4
          lw r3,-180(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -164(r14),r2
          % processing: t12 = array offset
          subi r2,r0,16
          lw r3,-184(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -168(r14),r2
          % processing: t13 = array offset
          subi r2,r0,4
          lw r3,-180(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -172(r14),r2
          % processing: t14 := coord + coord
          % processing: Array -> Switching to offset register.
          addi r5,r14,-116
          addi r5,r5,12
          lw r6,-164(r14)
          add r5,r5,r6
          lw r2,0(r5)
          % processing: Array -> Switching to offset register.
          addi r5,r14,-100
          addi r5,r5,80
          lw r6,-168(r14)
          add r5,r5,r6
          addi r5,r5,16
          addi r5,r5,-16
          addi r5,r5,12
          lw r6,-172(r14)
          add r5,r5,r6
          lw r3,0(r5)
          add r4,r2,r3
          sw -176(r14),r4
          % processing: coord := t14
          % processing: Array -> Switching to offset register.
          addi r2,r14,-116
          addi r2,r2,12
          lw r3,-160(r14)
          add r2,r2,r3
          lw r3,-176(r14)
          sw 0(r2),r3
          j incrfor4
endfor4   nop
          j incrfor5
endfor5   nop
          % processing: t15 := 0
          addi r2,r0,0
          sw -188(r14),r2
          % processing: for_cond(k), index: 6
          % processing: k := t15
          lw r2,-188(r14)
          sw -224(r14),r2
condfor6  nop
          % processing: t16 := 3
          addi r2,r0,3
          sw -192(r14),r2
          % processing: t17 := k < t16
          lw r2,-224(r14)
          lw r3,-192(r14)
          clt r4,r2,r3
          sw -196(r14),r4
          % processing: for_incr(k), index: 6
          lw r2,-196(r14)
          bz r2,endfor6
          j loopfor6
incrfor6  nop
          % processing: t18 := 1
          addi r2,r0,1
          sw -200(r14),r2
          % processing: t19 := k + t18
          lw r2,-224(r14)
          lw r3,-200(r14)
          add r4,r2,r3
          sw -204(r14),r4
          % processing: k := t19
          lw r2,-204(r14)
          sw -224(r14),r2
          j condfor6
loopfor6  nop
          % processing: t20 = array offset
          subi r2,r0,4
          lw r3,-224(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -208(r14),r2
          % processing: t21 = array offset
          subi r2,r0,4
          lw r3,-224(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -212(r14),r2
          % processing: t22 := 5
          addi r2,r0,5
          sw -216(r14),r2
          % processing: t23 := coord / t22
          % processing: Array -> Switching to offset register.
          addi r5,r14,-116
          addi r5,r5,12
          lw r6,-212(r14)
          add r5,r5,r6
          lw r2,0(r5)
          lw r3,-216(r14)
          div r4,r2,r3
          sw -220(r14),r4
          % processing: coord := t23
          % processing: Array -> Switching to offset register.
          addi r2,r14,-116
          addi r2,r2,12
          lw r3,-208(r14)
          add r2,r2,r3
          lw r3,-220(r14)
          sw 0(r2),r3
          j incrfor6
endfor6   nop
          % processing: return value = ave
          lw r2,-116(r14)
          sw -16(r14),r2
          lw r2,-112(r14)
          sw -12(r14),r2
          lw r2,-108(r14)
          sw -8(r14),r2
          lw r2,-104(r14)
          sw -4(r14),r2
          j endfunc12
endfunc12 nop
          lw r15,-20(r14)
          jr r15

          % processing: function definition: maxCoord (func13)
func13    nop
          sw -8(r14),r15
          % processing: t0 := 0
          addi r2,r0,0
          sw -20(r14),r2
          % processing: t1 = array offset
          subi r2,r0,4
          lw r3,-20(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -24(r14),r2
          % processing: t2 := 1
          addi r2,r0,1
          sw -28(r14),r2
          % processing: t3 = array offset
          subi r2,r0,4
          lw r3,-28(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -32(r14),r2
          % processing: t4 := coord >= coord
          % processing: Loading instance address to r12
          lw r6,-12(r14)
          add r12,r0,r6
          % processing: Array -> Switching to offset register.
          addi r5,r12,-16
          addi r5,r5,12
          lw r6,-24(r14)
          add r5,r5,r6
          lw r2,0(r5)
          % processing: Loading instance address to r12
          lw r6,-12(r14)
          add r12,r0,r6
          % processing: Array -> Switching to offset register.
          addi r5,r12,-16
          addi r5,r5,12
          lw r6,-32(r14)
          add r5,r5,r6
          lw r3,0(r5)
          cge r4,r2,r3
          sw -36(r14),r4
          % processing: if(t4), index: 3
          lw r2,-36(r14)
          bz r2,elseif3
          % processing: t5 := 0
          addi r2,r0,0
          sw -40(r14),r2
          % processing: t6 = array offset
          subi r2,r0,4
          lw r3,-40(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -44(r14),r2
          % processing: t7 := 2
          addi r2,r0,2
          sw -48(r14),r2
          % processing: t8 = array offset
          subi r2,r0,4
          lw r3,-48(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -52(r14),r2
          % processing: t9 := coord >= coord
          % processing: Loading instance address to r12
          lw r6,-12(r14)
          add r12,r0,r6
          % processing: Array -> Switching to offset register.
          addi r5,r12,-16
          addi r5,r5,12
          lw r6,-44(r14)
          add r5,r5,r6
          lw r2,0(r5)
          % processing: Loading instance address to r12
          lw r6,-12(r14)
          add r12,r0,r6
          % processing: Array -> Switching to offset register.
          addi r5,r12,-16
          addi r5,r5,12
          lw r6,-52(r14)
          add r5,r5,r6
          lw r3,0(r5)
          cge r4,r2,r3
          sw -56(r14),r4
          % processing: if(t9), index: 1
          lw r2,-56(r14)
          bz r2,elseif1
          % processing: t10 := 0
          addi r2,r0,0
          sw -60(r14),r2
          % processing: t11 = array offset
          subi r2,r0,4
          lw r3,-60(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -64(r14),r2
          % processing: max := coord
          % processing: Loading instance address to r12
          lw r3,-12(r14)
          add r12,r0,r3
          % processing: Array -> Switching to offset register.
          addi r2,r12,-16
          addi r2,r2,12
          lw r3,-64(r14)
          add r2,r2,r3
          lw r3,0(r2)
          sw -16(r14),r3
          j endif1
elseif1   nop
          % processing: t12 := 2
          addi r2,r0,2
          sw -68(r14),r2
          % processing: t13 = array offset
          subi r2,r0,4
          lw r3,-68(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -72(r14),r2
          % processing: max := coord
          % processing: Loading instance address to r12
          lw r3,-12(r14)
          add r12,r0,r3
          % processing: Array -> Switching to offset register.
          addi r2,r12,-16
          addi r2,r2,12
          lw r3,-72(r14)
          add r2,r2,r3
          lw r3,0(r2)
          sw -16(r14),r3
endif1    nop
          j endif3
elseif3   nop
          % processing: t14 := 1
          addi r2,r0,1
          sw -76(r14),r2
          % processing: t15 = array offset
          subi r2,r0,4
          lw r3,-76(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -80(r14),r2
          % processing: t16 := 2
          addi r2,r0,2
          sw -84(r14),r2
          % processing: t17 = array offset
          subi r2,r0,4
          lw r3,-84(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -88(r14),r2
          % processing: t18 := coord >= coord
          % processing: Loading instance address to r12
          lw r6,-12(r14)
          add r12,r0,r6
          % processing: Array -> Switching to offset register.
          addi r5,r12,-16
          addi r5,r5,12
          lw r6,-80(r14)
          add r5,r5,r6
          lw r2,0(r5)
          % processing: Loading instance address to r12
          lw r6,-12(r14)
          add r12,r0,r6
          % processing: Array -> Switching to offset register.
          addi r5,r12,-16
          addi r5,r5,12
          lw r6,-88(r14)
          add r5,r5,r6
          lw r3,0(r5)
          cge r4,r2,r3
          sw -92(r14),r4
          % processing: if(t18), index: 2
          lw r2,-92(r14)
          bz r2,elseif2
          % processing: t19 := 1
          addi r2,r0,1
          sw -96(r14),r2
          % processing: t20 = array offset
          subi r2,r0,4
          lw r3,-96(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -100(r14),r2
          % processing: max := coord
          % processing: Loading instance address to r12
          lw r3,-12(r14)
          add r12,r0,r3
          % processing: Array -> Switching to offset register.
          addi r2,r12,-16
          addi r2,r2,12
          lw r3,-100(r14)
          add r2,r2,r3
          lw r3,0(r2)
          sw -16(r14),r3
          j endif2
elseif2   nop
          % processing: t21 := 2
          addi r2,r0,2
          sw -104(r14),r2
          % processing: t22 = array offset
          subi r2,r0,4
          lw r3,-104(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -108(r14),r2
          % processing: max := coord
          % processing: Loading instance address to r12
          lw r3,-12(r14)
          add r12,r0,r3
          % processing: Array -> Switching to offset register.
          addi r2,r12,-16
          addi r2,r2,12
          lw r3,-108(r14)
          add r2,r2,r3
          lw r3,0(r2)
          sw -16(r14),r3
endif2    nop
endif3    nop
          % processing: return value = max
          lw r2,-16(r14)
          sw -4(r14),r2
          j endfunc13
endfunc13 nop
          lw r15,-8(r14)
          jr r15

mainfunc  entry
          addi r14,r0,topaddr
          % processing: t0 := 5
          addi r2,r0,5
          sw -4(r14),r2
          % processing: t1 := 0
          addi r2,r0,0
          sw -88(r14),r2
          % processing: t2 = array offset
          subi r2,r0,16
          lw r3,-88(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -92(r14),r2
          % processing: t3 := 0
          addi r2,r0,0
          sw -96(r14),r2
          % processing: t4 := 1
          addi r2,r0,1
          sw -100(r14),r2
          % processing: t5 := 3
          addi r2,r0,3
          sw -104(r14),r2
          % processing: Function call to fromCoord (func8)
          % processing: z = t5
          lw r3,-104(r14)
          sw -2128(r14),r3
          % processing: y = t4
          lw r3,-100(r14)
          sw -2132(r14),r3
          % processing: x = t3
          lw r3,-96(r14)
          sw -2136(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func8
          jl r15,func8
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t6 = return value
          lw r3,-2120(r14)
          sw -120(r14),r3
          lw r3,-2116(r14)
          sw -116(r14),r3
          lw r3,-2112(r14)
          sw -112(r14),r3
          lw r3,-2108(r14)
          sw -108(r14),r3
          % processing: a := fromCoord
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-92(r14)
          add r2,r2,r3
          lw r3,-120(r14)
          sw 0(r2),r3
          lw r3,-116(r14)
          sw 4(r2),r3
          lw r3,-112(r14)
          sw 8(r2),r3
          lw r3,-108(r14)
          sw 12(r2),r3
          % processing: t7 := 1
          addi r2,r0,1
          sw -124(r14),r2
          % processing: t8 = array offset
          subi r2,r0,16
          lw r3,-124(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -128(r14),r2
          % processing: t9 := 2
          addi r2,r0,2
          sw -132(r14),r2
          % processing: t10 := 3
          addi r2,r0,3
          sw -136(r14),r2
          % processing: t11 := 2
          addi r2,r0,2
          sw -140(r14),r2
          % processing: Function call to fromCoord (func8)
          % processing: z = t11
          lw r3,-140(r14)
          sw -2128(r14),r3
          % processing: y = t10
          lw r3,-136(r14)
          sw -2132(r14),r3
          % processing: x = t9
          lw r3,-132(r14)
          sw -2136(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func8
          jl r15,func8
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t12 = return value
          lw r3,-2120(r14)
          sw -156(r14),r3
          lw r3,-2116(r14)
          sw -152(r14),r3
          lw r3,-2112(r14)
          sw -148(r14),r3
          lw r3,-2108(r14)
          sw -144(r14),r3
          % processing: a := fromCoord
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-128(r14)
          add r2,r2,r3
          lw r3,-156(r14)
          sw 0(r2),r3
          lw r3,-152(r14)
          sw 4(r2),r3
          lw r3,-148(r14)
          sw 8(r2),r3
          lw r3,-144(r14)
          sw 12(r2),r3
          % processing: t13 := 2
          addi r2,r0,2
          sw -160(r14),r2
          % processing: t14 = array offset
          subi r2,r0,16
          lw r3,-160(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -164(r14),r2
          % processing: t15 := 2
          addi r2,r0,2
          sw -168(r14),r2
          % processing: t16 := 3
          addi r2,r0,3
          sw -172(r14),r2
          % processing: t17 := 3
          addi r2,r0,3
          sw -176(r14),r2
          % processing: Function call to fromCoord (func8)
          % processing: z = t17
          lw r3,-176(r14)
          sw -2128(r14),r3
          % processing: y = t16
          lw r3,-172(r14)
          sw -2132(r14),r3
          % processing: x = t15
          lw r3,-168(r14)
          sw -2136(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func8
          jl r15,func8
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t18 = return value
          lw r3,-2120(r14)
          sw -192(r14),r3
          lw r3,-2116(r14)
          sw -188(r14),r3
          lw r3,-2112(r14)
          sw -184(r14),r3
          lw r3,-2108(r14)
          sw -180(r14),r3
          % processing: a := fromCoord
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-164(r14)
          add r2,r2,r3
          lw r3,-192(r14)
          sw 0(r2),r3
          lw r3,-188(r14)
          sw 4(r2),r3
          lw r3,-184(r14)
          sw 8(r2),r3
          lw r3,-180(r14)
          sw 12(r2),r3
          % processing: t19 := 3
          addi r2,r0,3
          sw -196(r14),r2
          % processing: t20 = array offset
          subi r2,r0,16
          lw r3,-196(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -200(r14),r2
          % processing: t21 := 2
          addi r2,r0,2
          sw -204(r14),r2
          % processing: t22 := 4
          addi r2,r0,4
          sw -208(r14),r2
          % processing: t23 := 3
          addi r2,r0,3
          sw -212(r14),r2
          % processing: Function call to fromCoord (func8)
          % processing: z = t23
          lw r3,-212(r14)
          sw -2128(r14),r3
          % processing: y = t22
          lw r3,-208(r14)
          sw -2132(r14),r3
          % processing: x = t21
          lw r3,-204(r14)
          sw -2136(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func8
          jl r15,func8
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t24 = return value
          lw r3,-2120(r14)
          sw -228(r14),r3
          lw r3,-2116(r14)
          sw -224(r14),r3
          lw r3,-2112(r14)
          sw -220(r14),r3
          lw r3,-2108(r14)
          sw -216(r14),r3
          % processing: a := fromCoord
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-200(r14)
          add r2,r2,r3
          lw r3,-228(r14)
          sw 0(r2),r3
          lw r3,-224(r14)
          sw 4(r2),r3
          lw r3,-220(r14)
          sw 8(r2),r3
          lw r3,-216(r14)
          sw 12(r2),r3
          % processing: t25 := 4
          addi r2,r0,4
          sw -232(r14),r2
          % processing: t26 = array offset
          subi r2,r0,16
          lw r3,-232(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -236(r14),r2
          % processing: t27 := 4
          addi r2,r0,4
          sw -240(r14),r2
          % processing: t28 := 4
          addi r2,r0,4
          sw -244(r14),r2
          % processing: t29 := 4
          addi r2,r0,4
          sw -248(r14),r2
          % processing: Function call to fromCoord (func8)
          % processing: z = t29
          lw r3,-248(r14)
          sw -2128(r14),r3
          % processing: y = t28
          lw r3,-244(r14)
          sw -2132(r14),r3
          % processing: x = t27
          lw r3,-240(r14)
          sw -2136(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func8
          jl r15,func8
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t30 = return value
          lw r3,-2120(r14)
          sw -264(r14),r3
          lw r3,-2116(r14)
          sw -260(r14),r3
          lw r3,-2112(r14)
          sw -256(r14),r3
          lw r3,-2108(r14)
          sw -252(r14),r3
          % processing: a := fromCoord
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-236(r14)
          add r2,r2,r3
          lw r3,-264(r14)
          sw 0(r2),r3
          lw r3,-260(r14)
          sw 4(r2),r3
          lw r3,-256(r14)
          sw 8(r2),r3
          lw r3,-252(r14)
          sw 12(r2),r3
          % processing: Function call to average (func12)
          % processing: a = a
          lw r3,-84(r14)
          sw -2204(r14),r3
          lw r3,-80(r14)
          sw -2200(r14),r3
          lw r3,-76(r14)
          sw -2196(r14),r3
          lw r3,-72(r14)
          sw -2192(r14),r3
          lw r3,-68(r14)
          sw -2188(r14),r3
          lw r3,-64(r14)
          sw -2184(r14),r3
          lw r3,-60(r14)
          sw -2180(r14),r3
          lw r3,-56(r14)
          sw -2176(r14),r3
          lw r3,-52(r14)
          sw -2172(r14),r3
          lw r3,-48(r14)
          sw -2168(r14),r3
          lw r3,-44(r14)
          sw -2164(r14),r3
          lw r3,-40(r14)
          sw -2160(r14),r3
          lw r3,-36(r14)
          sw -2156(r14),r3
          lw r3,-32(r14)
          sw -2152(r14),r3
          lw r3,-28(r14)
          sw -2148(r14),r3
          lw r3,-24(r14)
          sw -2144(r14),r3
          lw r3,-20(r14)
          sw -2140(r14),r3
          lw r3,-16(r14)
          sw -2136(r14),r3
          lw r3,-12(r14)
          sw -2132(r14),r3
          lw r3,-8(r14)
          sw -2128(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func12
          jl r15,func12
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t31 = return value
          lw r3,-2120(r14)
          sw -296(r14),r3
          lw r3,-2116(r14)
          sw -292(r14),r3
          lw r3,-2112(r14)
          sw -288(r14),r3
          lw r3,-2108(r14)
          sw -284(r14),r3
          % processing: ave := average
          lw r2,-296(r14)
          sw -280(r14),r2
          lw r2,-292(r14)
          sw -276(r14),r2
          lw r2,-288(r14)
          sw -272(r14),r2
          lw r2,-284(r14)
          sw -268(r14),r2
          % processing: t32 := 0
          addi r2,r0,0
          sw -300(r14),r2
          % processing: for_cond(i), index: 7
          % processing: i := t32
          lw r2,-300(r14)
          sw -324(r14),r2
condfor7  nop
          % processing: t33 := 3
          addi r2,r0,3
          sw -304(r14),r2
          % processing: t34 := i < t33
          lw r2,-324(r14)
          lw r3,-304(r14)
          clt r4,r2,r3
          sw -308(r14),r4
          % processing: for_incr(i), index: 7
          lw r2,-308(r14)
          bz r2,endfor7
          j loopfor7
incrfor7  nop
          % processing: t35 := 1
          addi r2,r0,1
          sw -312(r14),r2
          % processing: t36 := i + t35
          lw r2,-324(r14)
          lw r3,-312(r14)
          add r4,r2,r3
          sw -316(r14),r4
          % processing: i := t36
          lw r2,-316(r14)
          sw -324(r14),r2
          j condfor7
loopfor7  nop
          % processing: t37 = array offset
          subi r2,r0,4
          lw r3,-324(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -320(r14),r2
          % processing: write(coord)
          % processing: Array -> Switching to offset register.
          addi r3,r14,-280
          addi r3,r3,12
          lw r4,-320(r14)
          add r3,r3,r4
          lw r2,0(r3)
          addi r14,r14,-2104
          % processing: Put value on stack
          sw -8(r14),r2
          % processing: Put buffer address on the stack
          addi r2,r0,buf
          sw -12(r14),r2
          % processing: Convert int to string for output
          jl r15,intstr
          sw -8(r14),r13
          % processing: Output to console
          jl r15,putstr
          subi r14,r14,-2104
          j incrfor7
endfor7   nop
          % processing: Function call to maxCoord (func13)
          % processing: Setting instance address
          addi r2,r14,-264
          sw -2116(r14),r2
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func13
          jl r15,func13
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t38 = return value
          lw r3,-2108(r14)
          sw -328(r14),r3
          % processing: write(maxCoord)
          lw r2,-328(r14)
          addi r14,r14,-2104
          % processing: Put value on stack
          sw -8(r14),r2
          % processing: Put buffer address on the stack
          addi r2,r0,buf
          sw -12(r14),r2
          % processing: Convert int to string for output
          jl r15,intstr
          sw -8(r14),r13
          % processing: Output to console
          jl r15,putstr
          subi r14,r14,-2104
          % processing: t39 := 0
          addi r2,r0,0
          sw -1860(r14),r2
          % processing: for_cond(j), index: 8
          % processing: j := t39
          lw r2,-1860(r14)
          sw -1968(r14),r2
condfor8  nop
          % processing: t40 := 5
          addi r2,r0,5
          sw -1864(r14),r2
          % processing: t41 := j < t40
          lw r2,-1968(r14)
          lw r3,-1864(r14)
          clt r4,r2,r3
          sw -1868(r14),r4
          % processing: for_incr(j), index: 8
          lw r2,-1868(r14)
          bz r2,endfor8
          j loopfor8
incrfor8  nop
          % processing: t42 := 1
          addi r2,r0,1
          sw -1872(r14),r2
          % processing: t43 := j + t42
          lw r2,-1968(r14)
          lw r3,-1872(r14)
          add r4,r2,r3
          sw -1876(r14),r4
          % processing: j := t43
          lw r2,-1876(r14)
          sw -1968(r14),r2
          j condfor8
loopfor8  nop
          % processing: t44 = array offset
          subi r2,r0,16
          lw r3,-1968(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -1880(r14),r2
          % processing: t45 := 2
          addi r2,r0,2
          sw -1884(r14),r2
          % processing: t46 = array offset
          subi r2,r0,4
          lw r3,-1884(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -1888(r14),r2
          % processing: t47 := 2
          addi r2,r0,2
          sw -1892(r14),r2
          % processing: t48 := coord == t47
          % processing: Array -> Switching to offset register.
          addi r5,r14,-84
          addi r5,r5,80
          lw r6,-1880(r14)
          add r5,r5,r6
          addi r5,r5,16
          addi r5,r5,-16
          addi r5,r5,12
          lw r6,-1888(r14)
          add r5,r5,r6
          lw r2,0(r5)
          lw r3,-1892(r14)
          ceq r4,r2,r3
          sw -1896(r14),r4
          % processing: if(t48), index: 4
          lw r2,-1896(r14)
          bz r2,elseif4
          % processing: t49 := 255
          addi r2,r0,255
          sw -1900(r14),r2
          % processing: t50 := 255
          addi r2,r0,255
          sw -1904(r14),r2
          % processing: t51 := 255
          addi r2,r0,255
          sw -1908(r14),r2
          % processing: Function call to newrgb (func11)
          % processing: b = t51
          lw r3,-1908(r14)
          sw -2124(r14),r3
          % processing: g = t50
          lw r3,-1904(r14)
          sw -2128(r14),r3
          % processing: r = t49
          lw r3,-1900(r14)
          sw -2132(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func11
          jl r15,func11
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t52 = return value
          lw r3,-2116(r14)
          sw -1920(r14),r3
          lw r3,-2112(r14)
          sw -1916(r14),r3
          lw r3,-2108(r14)
          sw -1912(r14),r3
          % processing: new := newrgb
          lw r2,-1920(r14)
          sw -1852(r14),r2
          lw r2,-1916(r14)
          sw -1848(r14),r2
          lw r2,-1912(r14)
          sw -1844(r14),r2
          j endif4
elseif4   nop
          % processing: t53 := 5
          addi r2,r0,5
          sw -1924(r14),r2
          % processing: t54 := j * t53
          lw r2,-1968(r14)
          lw r3,-1924(r14)
          mul r4,r2,r3
          sw -1928(r14),r4
          % processing: t55 := 10
          addi r2,r0,10
          sw -1932(r14),r2
          % processing: t56 := j * t55
          lw r2,-1968(r14)
          lw r3,-1932(r14)
          mul r4,r2,r3
          sw -1936(r14),r4
          % processing: t57 := 15
          addi r2,r0,15
          sw -1940(r14),r2
          % processing: t58 := j * t57
          lw r2,-1968(r14)
          lw r3,-1940(r14)
          mul r4,r2,r3
          sw -1944(r14),r4
          % processing: Function call to newrgb (func11)
          % processing: b = t58
          lw r3,-1944(r14)
          sw -2124(r14),r3
          % processing: g = t56
          lw r3,-1936(r14)
          sw -2128(r14),r3
          % processing: r = t54
          lw r3,-1928(r14)
          sw -2132(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func11
          jl r15,func11
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t59 = return value
          lw r3,-2116(r14)
          sw -1956(r14),r3
          lw r3,-2112(r14)
          sw -1952(r14),r3
          lw r3,-2108(r14)
          sw -1948(r14),r3
          % processing: new := newrgb
          lw r2,-1956(r14)
          sw -1852(r14),r2
          lw r2,-1952(r14)
          sw -1848(r14),r2
          lw r2,-1948(r14)
          sw -1844(r14),r2
endif4    nop
          % processing: t60 = array offset
          subi r2,r0,16
          lw r3,-1968(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -1960(r14),r2
          % processing: Function call to setAtPos (func6)
          % processing: Setting instance address
          addi r2,r14,-328
          sw -2116(r14),r2
          % processing: pos = a
          % processing: Array -> Switching to offset register.
          addi r3,r14,-84
          addi r3,r3,80
          lw r4,-1960(r14)
          add r3,r3,r4
          lw r4,0(r3)
          sw -2132(r14),r4
          lw r4,4(r3)
          sw -2128(r14),r4
          lw r4,8(r3)
          sw -2124(r14),r4
          lw r4,12(r3)
          sw -2120(r14),r4
          % processing: rgb = new
          lw r3,-1852(r14)
          sw -2144(r14),r3
          lw r3,-1848(r14)
          sw -2140(r14),r3
          lw r3,-1844(r14)
          sw -2136(r14),r3
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func6
          jl r15,func6
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t61 = return value
          lw r3,-2108(r14)
          sw -1964(r14),r3
          % processing: temp := setAtPos
          lw r2,-1964(r14)
          sw -1856(r14),r2
          j incrfor8
endfor8   nop
          % processing: Function call to findBluest (func7)
          % processing: Setting instance address
          addi r2,r14,-328
          sw -2140(r14),r2
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func7
          jl r15,func7
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t62 = return value
          lw r3,-2120(r14)
          sw -2000(r14),r3
          lw r3,-2116(r14)
          sw -1996(r14),r3
          lw r3,-2112(r14)
          sw -1992(r14),r3
          lw r3,-2108(r14)
          sw -1988(r14),r3
          % processing: max := findBluest
          lw r2,-2000(r14)
          sw -1984(r14),r2
          lw r2,-1996(r14)
          sw -1980(r14),r2
          lw r2,-1992(r14)
          sw -1976(r14),r2
          lw r2,-1988(r14)
          sw -1972(r14),r2
          % processing: t63 := 0
          addi r2,r0,0
          sw -2004(r14),r2
          % processing: for_cond(k), index: 9
          % processing: k := t63
          lw r2,-2004(r14)
          sw -2028(r14),r2
condfor9  nop
          % processing: t64 := 3
          addi r2,r0,3
          sw -2008(r14),r2
          % processing: t65 := k < t64
          lw r2,-2028(r14)
          lw r3,-2008(r14)
          clt r4,r2,r3
          sw -2012(r14),r4
          % processing: for_incr(k), index: 9
          lw r2,-2012(r14)
          bz r2,endfor9
          j loopfor9
incrfor9  nop
          % processing: t66 := 1
          addi r2,r0,1
          sw -2016(r14),r2
          % processing: t67 := k + t66
          lw r2,-2028(r14)
          lw r3,-2016(r14)
          add r4,r2,r3
          sw -2020(r14),r4
          % processing: k := t67
          lw r2,-2020(r14)
          sw -2028(r14),r2
          j condfor9
loopfor9  nop
          % processing: t68 = array offset
          subi r2,r0,4
          lw r3,-2028(r14)
          muli r4,r3,4
          sub r2,r2,r4
          sw -2024(r14),r2
          % processing: write(coord)
          % processing: Array -> Switching to offset register.
          addi r3,r14,-1984
          addi r3,r3,12
          lw r4,-2024(r14)
          add r3,r3,r4
          lw r2,0(r3)
          addi r14,r14,-2104
          % processing: Put value on stack
          sw -8(r14),r2
          % processing: Put buffer address on the stack
          addi r2,r0,buf
          sw -12(r14),r2
          % processing: Convert int to string for output
          jl r15,intstr
          sw -8(r14),r13
          % processing: Output to console
          jl r15,putstr
          subi r14,r14,-2104
          j incrfor9
endfor9   nop
          % processing: t69 := 0
          addi r2,r0,0
          sw -2032(r14),r2
          % processing: t70 = array offset
          subi r2,r0,16
          lw r3,-2032(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -2036(r14),r2
          % processing: t71 := 0
          addi r2,r0,0
          sw -2040(r14),r2
          % processing: id := t71
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-2036(r14)
          add r2,r2,r3
          addi r2,r2,16
          addi r2,r2,-4
          lw r3,-2040(r14)
          sw 0(r2),r3
          % processing: t72 := 1
          addi r2,r0,1
          sw -2044(r14),r2
          % processing: t73 = array offset
          subi r2,r0,16
          lw r3,-2044(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -2048(r14),r2
          % processing: t74 := 1
          addi r2,r0,1
          sw -2052(r14),r2
          % processing: id := t74
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-2048(r14)
          add r2,r2,r3
          addi r2,r2,16
          addi r2,r2,-4
          lw r3,-2052(r14)
          sw 0(r2),r3
          % processing: t75 := 2
          addi r2,r0,2
          sw -2056(r14),r2
          % processing: t76 = array offset
          subi r2,r0,16
          lw r3,-2056(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -2060(r14),r2
          % processing: t77 := 2
          addi r2,r0,2
          sw -2064(r14),r2
          % processing: id := t77
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-2060(r14)
          add r2,r2,r3
          addi r2,r2,16
          addi r2,r2,-4
          lw r3,-2064(r14)
          sw 0(r2),r3
          % processing: t78 := 3
          addi r2,r0,3
          sw -2068(r14),r2
          % processing: t79 = array offset
          subi r2,r0,16
          lw r3,-2068(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -2072(r14),r2
          % processing: t80 := 3
          addi r2,r0,3
          sw -2076(r14),r2
          % processing: id := t80
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-2072(r14)
          add r2,r2,r3
          addi r2,r2,16
          addi r2,r2,-4
          lw r3,-2076(r14)
          sw 0(r2),r3
          % processing: t81 := 4
          addi r2,r0,4
          sw -2080(r14),r2
          % processing: t82 = array offset
          subi r2,r0,16
          lw r3,-2080(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -2084(r14),r2
          % processing: t83 := 4
          addi r2,r0,4
          sw -2088(r14),r2
          % processing: id := t83
          % processing: Array -> Switching to offset register.
          addi r2,r14,-84
          addi r2,r2,80
          lw r3,-2084(r14)
          add r2,r2,r3
          addi r2,r2,16
          addi r2,r2,-4
          lw r3,-2088(r14)
          sw 0(r2),r3
          % processing: t84 := 3
          addi r2,r0,3
          sw -2092(r14),r2
          % processing: t85 = array offset
          subi r2,r0,16
          lw r3,-2092(r14)
          muli r4,r3,16
          sub r2,r2,r4
          sw -2096(r14),r2
          % processing: Function call to getid (func4)
          % processing: Setting instance address
          % processing: Array -> Switching to offset register.
          addi r3,r14,-84
          addi r3,r3,80
          lw r4,-2096(r14)
          add r3,r3,r4
          addi r3,r3,16
          addi r2,r3,0
          sw -2116(r14),r2
          % processing: Move stack frame pointer by: -2104
          addi r14,r14,-2104
          % processing: jump to: func4
          jl r15,func4
          % processing: Move back stack frame pointer by: -2104
          subi r14,r14,-2104
          % processing: t86 = return value
          lw r3,-2108(r14)
          sw -2100(r14),r3
          % processing: t87 := - getid
          % processing: Array -> Switching to offset register.
          addi r4,r14,-84
          addi r4,r4,80
          lw r5,-2096(r14)
          add r4,r4,r5
          addi r4,r4,16
          lw r2,-2100(r14)
          sub r3,r0,r2
          sw -2104(r14),r3
          % processing: write(t87)
          lw r2,-2104(r14)
          addi r14,r14,-2104
          % processing: Put value on stack
          sw -8(r14),r2
          % processing: Put buffer address on the stack
          addi r2,r0,buf
          sw -12(r14),r2
          % processing: Convert int to string for output
          jl r15,intstr
          sw -8(r14),r13
          % processing: Output to console
          jl r15,putstr
          subi r14,r14,-2104
endmain   hlt
          % processing: buffer space used for console output
buf       res 20
